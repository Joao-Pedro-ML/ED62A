#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>




#define N 50

typedef struct {
    int key;

} objeto;

typedef struct {
    objeto vetor[N];
    int topo;
} pilhaEst;

void iniciaPilha(pilhaEst *pilha) {
    pilha->topo = -1;

}

bool estaVazia(pilhaEst *pilha) {
    if (pilha->topo == -1) {
        return true;
    } else {
        return false;
    }
}

bool estaCheia(pilhaEst *pilha) {
    if (pilha->topo == N - 1) {
        return true;
    } else {
        return false;
    }
}

void push(objeto obj, pilhaEst *pilha) {

    if (pilha->topo == N - 1) {
        printf("Pilha cheia!\n");
    } else {
        pilha->vetor[pilha->topo] = obj;
        pilha->topo++;
    }
}

void pop(pilhaEst *pilha) {

    objeto x;
    if (pilha->topo == N - 1) {
        printf("A pilha esta vazia!\n");
    } else {
        x.key = pilha->vetor[pilha->topo].key;
        pilha->topo--;
    }

}

int size(pilhaEst *pilha) {

    int y = 0;
    printf("Tamanho da pilha: %i\n", y = pilha->topo);
    return (y);

}

objeto top(pilhaEst *pilha) {

    printf("Topo da pilha: %i", pilha->vetor[pilha->topo].key);

}

void print(pilhaEst *pilha) {

    printf("{");
    for (int i = 0; i < N; i++) {
        printf(" %i ", pilha->vetor[i].key);
    }
    printf("}\n");
}

int main(int argc, char** argv) {

    pilhaEst pilha;
    objeto obj;


    iniciaPilha(&pilha);

    for (int i = 0; i < 50; i++) {
        obj.key = i;
        push(obj, &pilha);
    }

    print(&pilha);
    size(&pilha);
    top(&pilha);

    return (EXIT_SUCCESS);
}
