#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct {
    int chave;
} objeto;

typedef struct NoPilha *ponteiroNoPilha;

typedef struct NoPilha {
    objeto obj;
    ponteiroNoPilha proximo;
} NoPilha;

typedef struct {
    ponteiroNoPilha topo;
    int tamanho;
} pilhadim;

void iniciaPilha(pilhadim *pilha) {
    pilha->topo = NULL;
    pilha->tamanho = 0;
}

void tamanho(pilhadim *pilha) {
    printf("Tamanho: %i\n", pilha->tamanho); 
}

bool estaVazia(pilhadim *pilha) {

    if(pilha->tamanho == 0)
        return true;
    
    return false;
    

}

void push(objeto obj, pilhadim *pilha) {
    ponteiroNoPilha aux;
    aux = (ponteiroNoPilha) malloc(sizeof (NoPilha));
    aux->obj = obj;
    aux->proximo = pilha->topo;
    pilha->topo = aux;
    pilha->tamanho = pilha->tamanho + 1;
    
}

void pop(pilhadim *pilha, objeto *item) {

    if (!estaVazia(pilha)) {
        *item = pilha->topo->obj;
        ponteiroNoPilha aux;
        aux = pilha->topo;
        pilha->topo = pilha->topo->proximo;
        free(aux);
        pilha->tamanho = pilha->tamanho - 1;
    }
}

void topo(pilhadim *pilha, objeto obj) {
    
    printf("Topo da pilha: %i\n", obj.chave);

}

void print(pilhadim *pilha) {
    printf("{");
    ponteiroNoPilha p;
    for (p = pilha->topo; p != NULL; p = p->proximo) {
        printf("%i ", p->obj.chave);
    }
    printf("}\n");
}

int main(int argc, char** argv) {

    pilhadim pilha;
    objeto obj;
    iniciaPilha(&pilha);
    for(int i=0;i<10;i++){
        obj.chave = i;
        push(obj, &pilha);
    }
    
    //estaVazia(&pilha);
    print(&pilha);
    tamanho(&pilha);
    topo(&pilha, obj);
    return (EXIT_SUCCESS);
}

